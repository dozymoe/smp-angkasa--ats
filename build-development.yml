lib-py:
  options:
    pylint_config_file: etc/pylint.toml
    pylint_work_dir: web/
    pylint_env:
      DJANGO_SETTINGS_MODULE: web.settings

  django-carbondesign:
    pylint:
      raw_file_in: "{_1}/{_2}/carbondesign/**/*.py"
      raw_depend_in: etc/pylint.toml

  frozen-django:
    pylint:
      raw_file_in: "{_1}/{_2}/frozen_django/**/*.py"
      raw_depend_in: etc/pylint.toml


pygmentize:
  shell:
    options:
      command: ./run pybin pygmentize -S default -f html -a .code > tmp/syntax.css
    raw_extra_out: tmp/syntax.css


docutils:
  cp:
    raw_file_in: python_modules/{_1}/writers/html5_polyglot/*.css
    raw_file_out: tmp/


web:
  options:
    pylint_config_file: etc/pylint.toml
    pylint_work_dir: "{_1}/"
    pylint_env:
      DJANGO_SETTINGS_MODULE: web.settings
    webpack_work_dir: "{_1}/"

  css:
    sass:
      shell:
        options:
          command: >
            node_modules/sass/sass.js -Inode_modules
            {_1}_assets/website/sass/app.scss
            tmp/{_1}-index-compiled.css
        rule_in:
          - docutils/cp
          - pygmentize/shell
        raw_depend_in:
          - package-{{PROJECT_VARIANT}}.json
          - "{_1}_assets/blog_posting/sass/**/*.scss"
          - "{_1}_assets/my_event/sass/**/*.scss"
          - "{_1}_assets/website/sass/**/*.scss"
          - "{_1}_assets/web_page/sass/**/*.scss"
          - "{_1}_assets/carbondesign/sass/**/*.scss"
        raw_extra_out: tmp/{_1}-index-compiled.css

    postcss:
      shell:
        options:
          command: >
            node_modules/postcss-cli/index.js --use autoprefixer -m
            -b 'last 10 version'
            tmp/{_1}-index-compiled.css
            -o tmp/{_1}-index-prefixed.css
        rule_in: "{_1}/{_2}/sass/shell"
        raw_extra_out: tmp/{_1}-index-prefixed.css

    map:
      cp:
        rule_in: "{_1}/{_2}/postcss/shell"
        raw_file_in: tmp/{_1}-index-prefixed.css.map
        raw_file_out: "{_1}/static/css/main.css.map"

    cp:
      rule_in: "{_1}/{_2}/postcss/shell"
      raw_file_in: tmp/{_1}-index-prefixed.css
      raw_file_out: "{_1}/static/css/main.css"

    minify:
      shell:
        options:
          command: >
            node_modules/csso-cli/bin/csso
            -i tmp/{_1}-index-prefixed.css
            -o {_1}/static/css/main.min.css
        rule_in: "{_1}/{_2}/postcss/shell"
        raw_extra_out: "{_1}/static/css/main.min.css"

  js:
    webpack:
      options:
        config_file: "{_1}_assets/webpack.config.js"
        mode: production
      raw_depend_in:
        - package-{{PROJECT_VARIANT}}.json
        - "{_1}_assets/*.js"
        - "{_1}_assets/misc/**/*.js"
        - "{_1}_assets/my_files/mithril-js/**/*.js"
        - "{_1}_assets/website/mithril-js/**/*.js"
        - "{_1}_assets/web_page/mithril-js/**/*.js"
        - lib/fireh-mithril/**/*.js
        - lib-py/django-carbondesign/carbondesign/js/**/*.js
        - lib-py/django-carbondesign/carbondesign/mithril-js/**/*.js
      raw_extra_out:
        - var/{_1}/webpack-{_2}.meta.json

  blog_posting:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  misc:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  my_event:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  my_files:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  my_front_content:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  my_slide:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  my_user:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  thing_keyword:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  web:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  website:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml

  web_page:
    pylint:
      raw_file_in: "{_1}/{_2}/**/*.py"
      raw_depend_in: etc/pylint.toml


  collectstatic:
    shell:
      options:
        command: ./run django-manage --project={_1} collectstatic --no-input
      rule_in:
        - "{_1}/css/minify/shell"
        - "{_1}/js/webpack"
      raw_depend_in:
        - python_modules/django/contrib/admin/static/**/*


  unit_test:
    shell:
      options:
        command: >
          ./run django-manage --project={_1} test
          --testrunner="{_1}.testcases.testrunner.UnitTestRunner"
          #-v2
          #--parallel
      rule_in:
        - "{_1}/blog_posting/pylint"
        - "{_1}/misc/pylint"
        - "{_1}/my_event/pylint"
        - "{_1}/my_files/pylint"
        - "{_1}/my_front_content/pylint"
        - "{_1}/my_user/pylint"
        - "{_1}/thing_keyword/pylint"
        - "{_1}/web/pylint"
        - "{_1}/website/pylint"
        - "{_1}/web_page/pylint"
        - "{_1}/my_slide/pylint"
        - lib-py/django-carbondesign/pylint
        - lib-py/frozen-django/pylint

  check_migration:
    shell:
      options:
        command: >
          ./run django-manage --project={_1} makemigrations
          --check --dry-run
      rule_in:
        - "{_1}/unit_test/shell"

  integration_test:
    shell:
      options:
        command: >
          ./run django-manage --project={_1} test
          --testrunner="{_1}.testcases.testrunner.IntegrationTestRunner"
          #-v2
          #--parallel
      rule_in:
        - "{_1}/check_migration/shell"


  py_makemessages:
    shell:
      options:
        command: ./run django-manage --project={_1} makemessages --symlinks -l id -l jv -l su -i '*.virtualenv*'
      rule_in:
        - "{_1}/unit_test/shell"
      raw_depend_in:
        - lib/misc/locale/**/*.po
        - "{_1}/*/templates/**/*.html"

  js_makemessages:
    shell:
      options:
        command: ./run django-manage --project={_1} makemessages --symlinks -d djangojs -l id -l jv -l su -i '*.virtualenv*'
      rule_in:
        - "{_1}/js/webpack"
      raw_depend_in:
        - lib/misc/locale/**/*.po
        - var/{_1}/webpack-js.meta.json

  prunemessages:
    shell:
      options:
        command: ./run django-manage --project={_1} prune_locale
      rule_in:
        -  "{_1}/js_makemessages/shell"
        -  "{_1}/py_makemessages/shell"

  compilemessages:
    shell:
      options:
        command: ./run django-admin --project={_1} {_2} -i '*.virtualenv*'
      rule_in:
        - "{_1}/prunemessages/shell"
      raw_depend_in:
        - lib-py/django-carbondesign/carbondesign/**/*.po
        - "{_1}/**/*.po"

  js_messages:
    shell:
      options:
        command: ./run django-manage compilejsi18n
      rule_in:
        - "{_1}/prunemessages/shell"
      raw_depend_in:
        - "{_1}/{_1}/settings*.py"
      raw_extra_out:
        - /var/www/smp-angkasa-ats/htdocs/assets/jsi18n/en/djangojs.js


  runit_sv:
    options:
      command: restart
      target: "{{HOME}}/service/smp-angkasa-django/"
      wait_sec: 120
      force: true
    rule_in:
      - "{_1}/integration_test/shell"
      - "{_1}/compilemessages/shell"
      - "{_1}/js/webpack"
    raw_depend_in:
      - etc/runner-{{PROJECT_VARIANT}}.json
      - etc/{{PROJECT_VARIANT}}/*.json
      - etc/{{PROJECT_VARIANT}}/{_1}/*.json
      - etc/{{PROJECT_VARIANT}}/{_1}/uwsgi.ini

  worker:
    runit_sv:
      options:
        command: restart
        target: "{{HOME}}/service/smp-angkasa-celery/"
        wait_sec: 120
        force: true
      rule_in:
        - "{_1}/runit_sv"

  build:
    shell:
      options:
        command: ./run django-manage --project={_1} build
      rule_in:
        - "{_1}/runit_sv"

  prune_website_assets:
    shell:
      options:
        command: ./run django-manage --project={_1} {_2}
      rule_in:
        - "{_1}/js/webpack"


node_modules:
  '@carbon':
    icons:
      svg:
        cp:
          options:
            _source_basedir_: "{_1}/{_2}/{_3}/{_4}/"
          raw_file_in: "{_1}/{_2}/{_3}/{_4}/**/*.svg"
          raw_file_out: web/static_svg/carbon/

  fontawesome:
    fonts:
      cp:
        raw_file_in: "{_1}/@fortawesome/{_2}-free/webfonts/*"
        raw_file_out:
          - web/static/fonts/


docs:
  epub:
    shell:
      options:
        command: ./run sphinx-build --project={_1} -- -M {_2} . _build
      raw_depend_in:
        - "{_1}-src/_static/*"
        - "{_1}-src/_templates/*"
        - "{_1}-src/conf.py"
        - "{_1}-src/*.rst"
  latexpdf:
    shell:
      options:
        command: ./run sphinx-build --project={_1} -- -M {_2} . _build
      raw_depend_in:
        - "{_1}-src/_static/*"
        - "{_1}-src/_templates/*"
        - "{_1}-src/conf.py"
        - "{_1}-src/*.rst"
  install:
    cp:
      raw_file_in:
        - "{_1}-src/_build/epub/SMPAngkasaATS.epub"
        - "{_1}-src/_build/latex/smpangkasaats.pdf"
      raw_file_out: "{_1}/"
